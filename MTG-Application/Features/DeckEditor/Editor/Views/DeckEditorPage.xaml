<?xml version="1.0" encoding="utf-8"?>
<Page
  x:Name="Root"
  x:Class="MTGApplication.Features.DeckEditor.Views.DeckEditorPage"
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
  xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
  xmlns:ui="using:CommunityToolkit.WinUI"
  xmlns:controls="using:CommunityToolkit.WinUI.Controls"
  xmlns:sys="using:System" 
  xmlns:commanderview="using:MTGApplication.Features.DeckEditor.Commanders.Views.Controls.CommanderView" 
  xmlns:customControls="using:MTGApplication.General.Views.Controls" 
  xmlns:cardlistview="using:MTGApplication.Features.DeckEditor.CardList.Views.Controls.CardListView" 
  xmlns:cardview="using:MTGApplication.Features.DeckEditor.CardList.Views.Controls.CardView" 
  xmlns:models="using:MTGApplication.Features.DeckEditor.Editor.Models" 
  xmlns:helpers="using:MTGApplication.General.Views.BindingHelpers" 
  xmlns:deckeditor="using:MTGApplication.Features.DeckEditor" 
  xmlns:cardtypedistributionchart="using:MTGApplication.Features.DeckEditor.Charts.Views.Controls.CardTypeDistributionChart" 
  xmlns:colordistributionchart="using:MTGApplication.Features.DeckEditor.Charts.Views.Controls.ColorDistributionChart" 
  xmlns:viewmodels="using:MTGApplication.Features.DeckEditor.ViewModels" 
  xmlns:converters="using:MTGApplication.Features.DeckEditor.Editor.Views.Converters" 
  xmlns:controls1="using:MTGApplication.Features.DeckEditor.CardList.Views.Controls" 
  xmlns:collections="using:CommunityToolkit.WinUI.Collections"
  mc:Ignorable="d"
  Background="{ThemeResource ApplicationPageBackgroundThemeBrush}"
  KeyboardAcceleratorPlacementMode="Hidden">

  <Page.Resources>
    <converters:StringOrDefaultConverter x:Key="StringOrDefaultConverter"/>
    <converters:CardColorGroupToBoolConverter x:Key="CardColorGroupToBoolConverter"/>
  </Page.Resources>
  
  <!--#region Keyboard Accelerators -->
  <!--NOTE: KeyboardAccelerators needs to be here because menu flyout accelerators do not work if the flyout has not been opened-->
  <Page.KeyboardAccelerators>
    <KeyboardAccelerator Key="Z" Modifiers="Control" Invoked="UndoKeyboardAccelerator_Invoked" />
    <KeyboardAccelerator Key="Y" Modifiers="Control" Invoked="RedoKeyboardAccelerator_Invoked" />
    <KeyboardAccelerator Modifiers="Control" Key="S" Invoked="SaveDeckKeyboardAccelerator_Invoked" />
    <KeyboardAccelerator Modifiers="Control" Key="O" Invoked="OpenDeckKeyboardAccelerator_Invoked" />
    <KeyboardAccelerator Modifiers="Control" Key="N" Invoked="NewDeckKeyboardAccelerator_Invoked" />
    <KeyboardAccelerator Key="Escape" Invoked="ResetFiltersKeyboardAccelerator_Invoked" />
  </Page.KeyboardAccelerators>
  <!--#endregion-->

  <Grid HorizontalAlignment="Stretch" VerticalAlignment="Stretch">

    <!--#region Visual State Manager -->
    <VisualStateManager.VisualStateGroups>
      <VisualStateGroup x:Name="DeckNameTitleSaveState">
        <!--NOTE: Changes deck name text to "Unsaved", if the deck has no name-->
        <VisualState>
          <VisualState.StateTriggers>
            <ui:IsEqualStateTrigger Value="{x:Bind ViewModel.Name, Mode=OneWay}" To="{x:Bind sys:String.Empty}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="SelectedDeckNameTitle.Text" Value="Unsaved" />
            <Setter Target="SelectedDeckNameTitle.FontStyle" Value="Italic" />
            <Setter Target="SelectedDeckNameTitle.Foreground" Value="LightGray" />
          </VisualState.Setters>
        </VisualState>

        <!--NOTE: Changes deck name text to different color to show that the deck has unsaved changes-->
        <VisualState>
          <VisualState.StateTriggers>
            <ui:IsEqualStateTrigger Value="{x:Bind ViewModel.HasUnsavedChanges, Mode=OneWay}" To="True" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="SelectedDeckNameTitle.Foreground" Value="{ThemeResource SystemAccentColorLight1}" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>

      <!--NOTE: Changes filter button color when filters has been applied-->
      <VisualStateGroup x:Name="DeckFilterAppBarButtonState">
        <VisualState>
          <VisualState.StateTriggers>
            <ui:IsEqualStateTrigger Value="{x:Bind CardFilter.FiltersApplied, Mode=OneWay}" To="True"/>
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="DeckFilterAppBarButton.Style" Value="{StaticResource PrimaryAppBarButtonStyle}"/>
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
    </VisualStateManager.VisualStateGroups>
    <!--#endregion-->

    <controls:DockPanel
      LastChildFill="True"
      Padding="0 0 10 10"
      Background="{ThemeResource ApplicationPageBackgroundThemeBrush}">

      <!--#region Sidebar -->
      <TabView
        x:Name="SidebarTabs"
        controls:DockPanel.Dock="Right"
        IsAddTabButtonVisible="False"
        Width="250"
        Margin="10 7 0 0"
        HorizontalAlignment="Stretch"
        VerticalAlignment="Stretch"
        BorderThickness="0 2 0 0"
        BorderBrush="{ThemeResource RegionColor}"
        AllowDropTabs="False"
        CanDragTabs="False"
        CanReorderTabs="False">
        <TabView.Resources>
          <!-- NOTE: Disables entrance transitions -->
          <Style TargetType="TabViewListView">
            <Setter Property="ItemContainerTransitions">
              <Setter.Value>
                <TransitionCollection />
              </Setter.Value>
            </Setter>
          </Style>
        </TabView.Resources>
        <TabViewItem Header="Side lists" IsClosable="False">

          <!--#region Side Lists -->
          <Grid RowSpacing="5" Margin="0 5 0 0">
            <Grid.RowDefinitions>
              <RowDefinition Height="auto" />
              <RowDefinition Height="auto" />
              <RowDefinition Height="*" />
              <RowDefinition Height="auto" />
              <RowDefinition Height="*" />
              <RowDefinition Height="auto" />
              <RowDefinition Height="*" />
            </Grid.RowDefinitions>

            <StackPanel Grid.Row="0" Orientation="Vertical">

              <!--#region Commander / Partner -->
              <commanderview:CommanderTextView
                PrefixText="Commander: "
                Model="{x:Bind ViewModel.Commander.Card, Mode=OneWay}"
                EdhrecButtonClick="{x:Bind ViewModel.OpenEdhrecCommanderWebsiteCommand, Mode=OneTime}"
                DeleteButtonClick="{x:Bind ViewModel.Commander.RemoveCommanderCommand, Mode=OneTime}"
                ChangePrintCommand="{x:Bind ViewModel.Commander.ChangeCardPrintCommand, Mode=OneTime}"
                CanDrag="True"
                AllowDrop="True"
                DragCopyCaptionText="Copy to Commander"
                DragMoveCaptionText="Move to Commander"
                OnDropCopy="{x:Bind ViewModel.Commander.ChangeCommanderCommand, Mode=OneTime}"
                OnDropRemove="{x:Bind ViewModel.Commander.RemoveCommanderCommand, Mode=OneTime}"
                OnDropBeginMoveFrom="{x:Bind ViewModel.Commander.BeginMoveFromCommand, Mode=OneTime}"
                OnDropBeginMoveTo="{x:Bind ViewModel.Commander.BeginMoveToCommand, Mode=OneTime}"
                OnDropExecuteMove="{x:Bind ViewModel.Commander.ExecuteMoveCommand, Mode=OneTime}"
                OnDropImport="{x:Bind ViewModel.Commander.ImportCommanderCommand, Mode=OneTime}"
                HoverPreviewEnabled="True" />
              <commanderview:CommanderTextView
                PrefixText="Partner: "
                Model="{x:Bind ViewModel.Partner.Card, Mode=OneWay}"
                EdhrecButtonClick="{x:Bind ViewModel.OpenEdhrecCommanderWebsiteCommand, Mode=OneTime}"
                DeleteButtonClick="{x:Bind ViewModel.Partner.RemoveCommanderCommand, Mode=OneTime}"
                ChangePrintCommand="{x:Bind ViewModel.Partner.ChangeCardPrintCommand, Mode=OneTime}"
                CanDrag="True"
                AllowDrop="True"
                DragCopyCaptionText="Copy to Partner"
                DragMoveCaptionText="Move to Partner"
                OnDropCopy="{x:Bind ViewModel.Partner.ChangeCommanderCommand, Mode=OneTime}"
                OnDropRemove="{x:Bind ViewModel.Partner.RemoveCommanderCommand, Mode=OneTime}"
                OnDropBeginMoveFrom="{x:Bind ViewModel.Partner.BeginMoveFromCommand, Mode=OneTime}"
                OnDropBeginMoveTo="{x:Bind ViewModel.Partner.BeginMoveToCommand, Mode=OneTime}"
                OnDropExecuteMove="{x:Bind ViewModel.Partner.ExecuteMoveCommand, Mode=OneTime}"
                OnDropImport="{x:Bind ViewModel.Partner.ImportCommanderCommand, Mode=OneTime}"
                HoverPreviewEnabled="True" />
              <!--#endregion-->

            </StackPanel>

            <!--#region Maybelist -->
            <customControls:LinedHeader Grid.Row="1">
              <customControls:LinedHeader.Header>
                <TextBlock Text="Maybe">
                  <TextBlock.ContextFlyout>
                    <MenuFlyout AreOpenCloseAnimationsEnabled="False" Placement="Bottom">
                      <MenuFlyoutItem Command="{x:Bind ViewModel.MaybeCardList.ImportCardsCommand, Mode=OneTime}" Text="Import..." />
                      <MenuFlyoutSubItem Text="Export...">
                        <MenuFlyoutItem Command="{x:Bind ViewModel.MaybeCardList.ExportCardsCommand, Mode=OneTime}" CommandParameter="Name" Text="By Name" />
                        <MenuFlyoutItem Command="{x:Bind ViewModel.MaybeCardList.ExportCardsCommand, Mode=OneTime}" CommandParameter="Id" Text="By Id" />
                      </MenuFlyoutSubItem>
                      <MenuFlyoutItem Command="{x:Bind ViewModel.MaybeCardList.ClearCommand, Mode=OneTime}" Text="Clear" Background="IndianRed" />
                    </MenuFlyout>
                  </TextBlock.ContextFlyout>
                </TextBlock>
              </customControls:LinedHeader.Header>
            </customControls:LinedHeader>
            <cardlistview:AdvancedCardListView
              x:Name="MaybeCardsListView"
              Grid.Row="2"
              DataContext="{x:Bind ViewModel.MaybeCardList, Mode=OneWay}"
              ItemsSource="{x:Bind MaybeCardCollectionSource.View, Mode=OneWay}"
              Style="{ThemeResource MTGListViewStyle}"
              ItemContainerStyle="{StaticResource MTGListViewItemContainerStyle}"
              SelectionMode="Single"
              CanDragItems="True"
              AllowDrop="True"
              OnDropCopy="{x:Bind ViewModel.MaybeCardList.AddCardCommand, Mode=OneTime}"
              OnDropImport="{x:Bind ViewModel.MaybeCardList.ImportCardsCommand, Mode=OneTime}"
              OnDropBeginMoveFrom="{x:Bind ViewModel.MaybeCardList.BeginMoveFromCommand, Mode=OneTime}"
              OnDropBeginMoveTo="{x:Bind ViewModel.MaybeCardList.BeginMoveToCommand, Mode=OneTime}"
              OnDropExecuteMove="{x:Bind ViewModel.MaybeCardList.ExecuteMoveCommand, Mode=OneTime}"
              LosingFocus="ListView_LosingFocus">
              <cardlistview:AdvancedCardListView.Resources>
                <customControls:BindableCollectionView 
                  x:Name="MaybeCardCollectionSource" Source="{x:Bind ViewModel.MaybeCardList.Cards, Mode=OneWay}"
                  Filter="{x:Bind CardFilter.ValidationPredicate, Mode=OneWay}"
                  SortComparer="{x:Bind CardSorter.SortProperties.Comparer, Mode=OneWay}"/>
              </cardlistview:AdvancedCardListView.Resources>
              <cardlistview:AdvancedCardListView.KeyboardAccelerators>
                <KeyboardAccelerator Key="Delete" Invoked="DeleteCardKeyboardAccelerator_Invoked" />
              </cardlistview:AdvancedCardListView.KeyboardAccelerators>
              <cardlistview:AdvancedCardListView.ItemTemplate>
                <DataTemplate x:DataType="models:DeckEditorMTGCard">
                  <cardview:DeckEditorCardTextView
                    d:DataContext="{d:DesignInstance Type=viewmodels:CardListViewModel}"
                    DataContext="{Binding ElementName=MaybeCardsListView, Path=DataContext, Mode=OneTime}"
                    Model="{x:Bind Mode=OneTime}"
                    SetIconVisible="False"
                    TypeLineVisible="False"
                    HoverPreviewEnabled="True"
                    DeleteButtonClick="{Binding RemoveCardCommand, Mode=OneTime}"
                    CountChangeCommand="{Binding ChangeCardCountCommand, Mode=OneTime}"
                    ChangePrintCommand="{Binding ChangeCardPrintCommand, Mode=OneTime}"/>
                </DataTemplate>
              </cardlistview:AdvancedCardListView.ItemTemplate>
            </cardlistview:AdvancedCardListView>
            <!--#endregion-->

            <!--#region Wishlist -->
            <customControls:LinedHeader Grid.Row="3">
              <customControls:LinedHeader.Header>
                <TextBlock Text="Wishlist">
                  <TextBlock.ContextFlyout>
                    <MenuFlyout AreOpenCloseAnimationsEnabled="False" Placement="Bottom">
                      <MenuFlyoutItem Command="{x:Bind ViewModel.WishCardList.ImportCardsCommand, Mode=OneTime}" Text="Import..."/>
                      <MenuFlyoutSubItem Text="Export...">
                        <MenuFlyoutItem Command="{x:Bind ViewModel.WishCardList.ExportCardsCommand, Mode=OneTime}" CommandParameter="Name" Text="By Name"/>
                        <MenuFlyoutItem Command="{x:Bind ViewModel.WishCardList.ExportCardsCommand, Mode=OneTime}" CommandParameter="Id" Text="By Id"/>
                      </MenuFlyoutSubItem>
                      <MenuFlyoutItem Command="{x:Bind ViewModel.WishCardList.ClearCommand, Mode=OneTime}" Text="Clear" Background="IndianRed"/>
                    </MenuFlyout>
                  </TextBlock.ContextFlyout>
                </TextBlock>
              </customControls:LinedHeader.Header>
            </customControls:LinedHeader>
            <cardlistview:AdvancedCardListView
              x:Name="WishCardsListView"
              Grid.Row="4"
              DataContext="{x:Bind ViewModel.WishCardList, Mode=OneWay}"
              ItemsSource="{x:Bind WishCardCollectionSource.View, Mode=OneWay}"
              Style="{ThemeResource MTGListViewStyle}"
              ItemContainerStyle="{StaticResource MTGListViewItemContainerStyle}"
              SelectionMode="Single"
              CanDragItems="True"
              AllowDrop="True"
              OnDropCopy="{x:Bind ViewModel.WishCardList.AddCardCommand, Mode=OneTime}"
              OnDropImport="{x:Bind ViewModel.WishCardList.ImportCardsCommand, Mode=OneTime}"
              OnDropBeginMoveFrom="{x:Bind ViewModel.WishCardList.BeginMoveFromCommand, Mode=OneTime}"
              OnDropBeginMoveTo="{x:Bind ViewModel.WishCardList.BeginMoveToCommand, Mode=OneTime}"
              OnDropExecuteMove="{x:Bind ViewModel.WishCardList.ExecuteMoveCommand, Mode=OneTime}"
              LosingFocus="ListView_LosingFocus">
              <cardlistview:AdvancedCardListView.Resources>
                <customControls:BindableCollectionView 
                  x:Name="WishCardCollectionSource" Source="{x:Bind ViewModel.WishCardList.Cards, Mode=OneWay}"
                  Filter="{x:Bind CardFilter.ValidationPredicate, Mode=OneWay}"
                  SortComparer="{x:Bind CardSorter.SortProperties.Comparer, Mode=OneWay}"/>
              </cardlistview:AdvancedCardListView.Resources>
              <cardlistview:AdvancedCardListView.KeyboardAccelerators>
                <KeyboardAccelerator Key="Delete" Invoked="DeleteCardKeyboardAccelerator_Invoked"/>
              </cardlistview:AdvancedCardListView.KeyboardAccelerators>
              <cardlistview:AdvancedCardListView.ItemTemplate>
                <DataTemplate x:DataType="models:DeckEditorMTGCard">
                  <cardview:DeckEditorCardTextView
                    d:DataContext="{d:DesignInstance Type=viewmodels:CardListViewModel}"
                    DataContext="{Binding ElementName=WishCardsListView, Path=DataContext, Mode=OneTime}"
                    Model="{x:Bind Mode=OneTime}"
                    SetIconVisible="False"
                    TypeLineVisible="False"
                    HoverPreviewEnabled="True"
                    DeleteButtonClick="{Binding RemoveCardCommand, Mode=OneTime}"
                    CountChangeCommand="{Binding ChangeCardCountCommand, Mode=OneTime}"
                    ChangePrintCommand="{Binding ChangeCardPrintCommand, Mode=OneTime}"/>
                </DataTemplate>
              </cardlistview:AdvancedCardListView.ItemTemplate>
            </cardlistview:AdvancedCardListView>
            <!--#endregion-->

            <!--#region Removelist -->
            <customControls:LinedHeader Grid.Row="5">
              <customControls:LinedHeader.Header>
                <TextBlock Text="Remove">
                  <TextBlock.ContextFlyout>
                    <MenuFlyout AreOpenCloseAnimationsEnabled="False" Placement="Bottom">
                      <MenuFlyoutItem Command="{x:Bind ViewModel.RemoveCardList.ImportCardsCommand, Mode=OneTime}" Text="Import..."/>
                      <MenuFlyoutSubItem Text="Export...">
                        <MenuFlyoutItem Command="{x:Bind ViewModel.RemoveCardList.ExportCardsCommand, Mode=OneTime}" CommandParameter="Name" Text="By Name"/>
                        <MenuFlyoutItem Command="{x:Bind ViewModel.RemoveCardList.ExportCardsCommand, Mode=OneTime}" CommandParameter="Id" Text="By Id"/>
                      </MenuFlyoutSubItem>
                      <MenuFlyoutItem Command="{x:Bind ViewModel.RemoveCardList.ClearCommand, Mode=OneTime}" Text="Clear" Background="IndianRed"/>
                    </MenuFlyout>
                  </TextBlock.ContextFlyout>
                </TextBlock>
              </customControls:LinedHeader.Header>
            </customControls:LinedHeader>
            <cardlistview:AdvancedCardListView
              x:Name="RemoveCardsListView"
              Grid.Row="6"
              DataContext="{x:Bind ViewModel.RemoveCardList, Mode=OneWay}"
              ItemsSource="{x:Bind RemoveCardCollectionSource.View, Mode=OneWay}"
              Style="{ThemeResource MTGListViewStyle}"
              ItemContainerStyle="{StaticResource MTGListViewItemContainerStyle}"
              SelectionMode="Single"
              CanDragItems="True"
              AllowDrop="True"
              OnDropCopy="{x:Bind ViewModel.RemoveCardList.AddCardCommand, Mode=OneTime}"
              OnDropImport="{x:Bind ViewModel.RemoveCardList.ImportCardsCommand, Mode=OneTime}"
              OnDropBeginMoveFrom="{x:Bind ViewModel.RemoveCardList.BeginMoveFromCommand, Mode=OneTime}"
              OnDropBeginMoveTo="{x:Bind ViewModel.RemoveCardList.BeginMoveToCommand, Mode=OneTime}"
              OnDropExecuteMove="{x:Bind ViewModel.RemoveCardList.ExecuteMoveCommand, Mode=OneTime}"
              LosingFocus="ListView_LosingFocus">
              <cardlistview:AdvancedCardListView.Resources>
                <customControls:BindableCollectionView 
                  x:Name="RemoveCardCollectionSource" Source="{x:Bind ViewModel.RemoveCardList.Cards, Mode=OneWay}"
                  Filter="{x:Bind CardFilter.ValidationPredicate, Mode=OneWay}"
                  SortComparer="{x:Bind CardSorter.SortProperties.Comparer, Mode=OneWay}"/>
              </cardlistview:AdvancedCardListView.Resources>
              <cardlistview:AdvancedCardListView.KeyboardAccelerators>
                <KeyboardAccelerator Key="Delete" Invoked="DeleteCardKeyboardAccelerator_Invoked"/>
              </cardlistview:AdvancedCardListView.KeyboardAccelerators>
              <cardlistview:AdvancedCardListView.ItemTemplate>
                <DataTemplate x:DataType="models:DeckEditorMTGCard">
                  <cardview:DeckEditorCardTextView
                    d:DataContext="{d:DesignInstance Type=viewmodels:CardListViewModel}"
                    DataContext="{Binding ElementName=RemoveCardsListView, Path=DataContext, Mode=OneTime}"
                    Model="{x:Bind Mode=OneTime}"
                    SetIconVisible="False"
                    TypeLineVisible="False"
                    HoverPreviewEnabled="True"
                    DeleteButtonClick="{Binding RemoveCardCommand, Mode=OneTime}"
                    CountChangeCommand="{Binding ChangeCardCountCommand, Mode=OneTime}"
                    ChangePrintCommand="{Binding ChangeCardPrintCommand, Mode=OneTime}"/>
                </DataTemplate>
              </cardlistview:AdvancedCardListView.ItemTemplate>
            </cardlistview:AdvancedCardListView>
            <!--#endregion-->

          </Grid>
          <!--#endregion Side Lists-->

        </TabViewItem>
        <TabViewItem Header="Info" IsClosable="False">
          <ScrollViewer VerticalScrollBarVisibility="Auto">
            <StackPanel Margin="0 5 0 0" Orientation="Vertical" Spacing="5">

              <!--#region Side Buttons -->
              <TextBlock>
                <Run Text="Price:" />
                <Run Text="{x:Bind helpers:Format.EuroToString(ViewModel.Price, 0), Mode=OneWay}" />
              </TextBlock>
              <StackPanel Orientation="Horizontal" Spacing="10">
                <Button Content="Tokens" Command="{x:Bind ViewModel.ShowDeckTokensCommand, Mode=OneTime}" Style="{StaticResource PrimaryButtonStyle}"/>
                <Button Content="EDHREC" Command="{x:Bind ViewModel.OpenEdhrecSearchWindowCommand, Mode=OneTime}" Style="{StaticResource PrimaryButtonStyle}"/>
                <Button Content="Playtest" Command="{x:Bind ViewModel.OpenDeckTestingWindowCommand, Mode=OneTime}" Style="{StaticResource PrimaryButtonStyle}"/>
              </StackPanel>
              <!--#endregion-->

              <!--#region Charts -->
              <customControls:LinedHeader>
                <customControls:LinedHeader.Header>
                  <TextBlock Text="Mana Curve"/>
                </customControls:LinedHeader.Header>
              </customControls:LinedHeader>
              <deckeditor:ManaCurveChart Cards="{x:Bind ViewModel.DeckCardList.Cards, Mode=OneWay}" Height="250"/>
              <customControls:LinedHeader>
                <customControls:LinedHeader.Header>
                  <TextBlock Text="Type Distribution"/>
                </customControls:LinedHeader.Header>
              </customControls:LinedHeader>
              <cardtypedistributionchart:CardTypeDistributionChart Cards="{x:Bind ViewModel.DeckCardList.Cards, Mode=OneWay}" Height="250"/>
              <customControls:LinedHeader>
                <customControls:LinedHeader.Header>
                  <TextBlock Text="Mana Distribution"/>
                </customControls:LinedHeader.Header>
              </customControls:LinedHeader>
              <colordistributionchart:ManaDistributionChart Cards="{x:Bind ViewModel.DeckCardList.Cards, Mode=OneWay}" Height="250"/>
              <!--#endregion Charts-->

            </StackPanel>
          </ScrollViewer>
        </TabViewItem>
      </TabView>
      <!--#endregion-->

      <!--#region Top Bar -->
      <Grid 
        controls:DockPanel.Dock="Top" 
        Background="{ThemeResource ApplicationPageBackgroundThemeBrush}"
        BorderThickness="0 0 0 1"
        BorderBrush="{ThemeResource RegionColor}">

        <!--#region Commands -->
        <StackPanel Orientation="Horizontal">
          <CommandBar IsOpen="False" DefaultLabelPosition="Right">

            <!--#region File -->
            <AppBarButton Icon="OpenFile" Label="File">
              <AppBarButton.Flyout>
                <MenuFlyout AreOpenCloseAnimationsEnabled="False" Placement="Bottom">
                  <MenuFlyoutItem Command="{x:Bind ViewModel.NewDeckCommand, Mode=OneTime}" Icon="NewFolder" Text="New" KeyboardAcceleratorTextOverride="Ctrl+N"/>
                  <MenuFlyoutItem Command="{x:Bind ViewModel.OpenDeckCommand, Mode=OneTime}" Icon="OpenFile" Text="Open..." KeyboardAcceleratorTextOverride="Ctrl+O"/>
                  <MenuFlyoutItem Command="{x:Bind ViewModel.SaveDeckCommand, Mode=OneTime}" Icon="Save" Text="Save..." KeyboardAcceleratorTextOverride="Ctrl+S"/>
                  <MenuFlyoutSeparator/>
                  <MenuFlyoutItem Command="{x:Bind ViewModel.DeleteDeckCommand, Mode=OneTime}" Background="IndianRed" Icon="Delete" Text="Delete"/>
                </MenuFlyout>
              </AppBarButton.Flyout>
            </AppBarButton>
            <!--#endregion-->

            <!--#region Edit -->
            <AppBarButton Icon="Edit" Label="Edit">
              <AppBarButton.Flyout>
                <MenuFlyout AreOpenCloseAnimationsEnabled="False" Placement="Bottom">
                  <MenuFlyoutItem Command="{x:Bind ViewModel.UndoCommand, Mode=OneTime}" Icon="Undo" Text="Undo" KeyboardAcceleratorTextOverride="Ctrl+Z"/>
                  <MenuFlyoutItem Command="{x:Bind ViewModel.RedoCommand, Mode=OneTime}" Icon="Redo" Text="Redo" KeyboardAcceleratorTextOverride="Ctrl+Y"/>
                </MenuFlyout>
              </AppBarButton.Flyout>
            </AppBarButton>
            <!--#endregion-->

            <AppBarSeparator/>

            <!--#region Zoom -->
            <AppBarButton Icon="ZoomIn" Label="Zoom">
              <AppBarButton.Flyout>
                <Flyout AreOpenCloseAnimationsEnabled="False">
                  <Slider x:Name="CardViewImageSizeSlider" Header="Card size" Value="250" Width="200" HorizontalAlignment="Left" Maximum="350" Minimum="140" SnapsTo="Ticks" TickFrequency="10" TickPlacement="Outside"/>
                </Flyout>
              </AppBarButton.Flyout>
            </AppBarButton>
            <!--#endregion-->

            <!--#region Display -->
            <AppBarButton Icon="PreviewLink" ToolTipService.ToolTip="Display" Label="Display">
              <AppBarButton.Flyout>
                <MenuFlyout AreOpenCloseAnimationsEnabled="False" Placement="Bottom">
                  <RadioMenuFlyoutItem IsChecked="{x:Bind DeckGroupViewVisible, Mode=OneWay}" Command="{x:Bind SetDeckDisplayTypeCommand, Mode=OneWay}" CommandParameter="Group" Text="Groups" GroupName="DeckDisplayCheck" Icon="{ui:SymbolIcon Symbol=Folder}" />
                  <RadioMenuFlyoutItem IsChecked="{x:Bind DeckImageViewVisible, Mode=OneWay}" Command="{x:Bind SetDeckDisplayTypeCommand, Mode=OneWay}" CommandParameter="Image" Text="Images" GroupName="DeckDisplayCheck" Icon="{ui:SymbolIcon Symbol=Pictures}" />
                  <RadioMenuFlyoutItem IsChecked="{x:Bind DeckTextViewVisible, Mode=OneWay}" Command="{x:Bind SetDeckDisplayTypeCommand, Mode=OneWay}" CommandParameter="Text" Text="Text" GroupName="DeckDisplayCheck" Icon="{ui:SymbolIcon Symbol=List}" />
                </MenuFlyout>
              </AppBarButton.Flyout>
            </AppBarButton>
            <!--#endregion-->

            <!--#region Sort -->
            <AppBarButton Icon="Sort" Label="Sort" AutomationProperties.Name="Order">
              <AppBarButton.Flyout>
                <MenuFlyout AreOpenCloseAnimationsEnabled="False" Placement="Bottom">
                  <RadioMenuFlyoutItem Command="{x:Bind CardSorter.ChangeSortDirectionCommand, Mode=OneTime}" CommandParameter="Ascending" Text="Ascending" GroupName="DirectionGroup" IsChecked="True"/>
                  <RadioMenuFlyoutItem Command="{x:Bind CardSorter.ChangeSortDirectionCommand, Mode=OneTime}" CommandParameter="Descending" Text="Descending" GroupName="DirectionGroup" />
                  <MenuFlyoutSeparator/>
                  <RadioMenuFlyoutItem Command="{x:Bind CardSorter.ChangePrimarySortPropertyCommand, Mode=OneTime}" CommandParameter="CMC" Text="CMC" GroupName="PrimaryDeckSortProperty" IsChecked="True"/>
                  <RadioMenuFlyoutItem Command="{x:Bind CardSorter.ChangePrimarySortPropertyCommand, Mode=OneTime}" CommandParameter="Name"  Text="Name" GroupName="PrimaryDeckSortProperty"/>
                  <RadioMenuFlyoutItem Command="{x:Bind CardSorter.ChangePrimarySortPropertyCommand, Mode=OneTime}" CommandParameter="Color" Text="Color" GroupName="PrimaryDeckSortProperty"/>
                  <RadioMenuFlyoutItem Command="{x:Bind CardSorter.ChangePrimarySortPropertyCommand, Mode=OneTime}" CommandParameter="SpellType" Text="Type" GroupName="PrimaryDeckSortProperty"/>
                  <RadioMenuFlyoutItem Command="{x:Bind CardSorter.ChangePrimarySortPropertyCommand, Mode=OneTime}" CommandParameter="Rarity" Text="Rarity" GroupName="PrimaryDeckSortProperty"/>
                  <RadioMenuFlyoutItem Command="{x:Bind CardSorter.ChangePrimarySortPropertyCommand, Mode=OneTime}" CommandParameter="Set" Text="Set" GroupName="PrimaryDeckSortProperty"/>
                  <RadioMenuFlyoutItem Command="{x:Bind CardSorter.ChangePrimarySortPropertyCommand, Mode=OneTime}" CommandParameter="Count" Text="Count" GroupName="PrimaryDeckSortProperty"/>
                  <RadioMenuFlyoutItem Command="{x:Bind CardSorter.ChangePrimarySortPropertyCommand, Mode=OneTime}" CommandParameter="Price" Text="Price" GroupName="PrimaryDeckSortProperty"/>
                  <MenuFlyoutSeparator />
                  <RadioMenuFlyoutItem Command="{x:Bind CardSorter.ChangeSecondarySortPropertyCommand, Mode=OneTime}" CommandParameter="CMC" Text="CMC" GroupName="SecondaryDeckSortProperty"/>
                  <RadioMenuFlyoutItem Command="{x:Bind CardSorter.ChangeSecondarySortPropertyCommand, Mode=OneTime}" CommandParameter="Name"  Text="Name" GroupName="SecondaryDeckSortProperty" IsChecked="True"/>
                  <RadioMenuFlyoutItem Command="{x:Bind CardSorter.ChangeSecondarySortPropertyCommand, Mode=OneTime}" CommandParameter="Color" Text="Color" GroupName="SecondaryDeckSortProperty"/>
                  <RadioMenuFlyoutItem Command="{x:Bind CardSorter.ChangeSecondarySortPropertyCommand, Mode=OneTime}" CommandParameter="SpellType" Text="Type" GroupName="SecondaryDeckSortProperty"/>
                  <RadioMenuFlyoutItem Command="{x:Bind CardSorter.ChangeSecondarySortPropertyCommand, Mode=OneTime}" CommandParameter="Rarity" Text="Rarity" GroupName="SecondaryDeckSortProperty"/>
                  <RadioMenuFlyoutItem Command="{x:Bind CardSorter.ChangeSecondarySortPropertyCommand, Mode=OneTime}" CommandParameter="Set" Text="Set" GroupName="SecondaryDeckSortProperty"/>
                  <RadioMenuFlyoutItem Command="{x:Bind CardSorter.ChangeSecondarySortPropertyCommand, Mode=OneTime}" CommandParameter="Count" Text="Count" GroupName="SecondaryDeckSortProperty"/>
                  <RadioMenuFlyoutItem Command="{x:Bind CardSorter.ChangeSecondarySortPropertyCommand, Mode=OneTime}" CommandParameter="Price" Text="Price" GroupName="SecondaryDeckSortProperty"/>
                </MenuFlyout>
              </AppBarButton.Flyout>
            </AppBarButton>
            <!--#endregion-->

            <!--#region Filter -->
            <AppBarButton x:Name="DeckFilterAppBarButton" Icon="Filter" Label="Filter" AllowFocusOnInteraction="True">
              <AppBarButton.KeyboardAccelerators>
                <KeyboardAccelerator Key="F" Modifiers="Control"/>
              </AppBarButton.KeyboardAccelerators>
              <AppBarButton.Flyout>
                <Flyout AreOpenCloseAnimationsEnabled="False">
                  <StackPanel Orientation="Vertical" Spacing="10">
                    <TextBox Text="{x:Bind CardFilter.NameText, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" PlaceholderText="Filter name..."/>
                    <TextBox Text="{x:Bind CardFilter.TypeText, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" PlaceholderText="Filter type..."/>
                    <TextBox Text="{x:Bind CardFilter.OracleText, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" PlaceholderText="Filter oracle text..."/>
                    <NumberBox PlaceholderText="Filter CMC..." SpinButtonPlacementMode="Hidden" Value="{x:Bind CardFilter.Cmc, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                    <StackPanel Orientation="Horizontal" Spacing="5">
                      <ToggleButton Content="W" ToolTipService.ToolTip="White" IsChecked="{x:Bind CardFilter.White, Mode=TwoWay}"/>
                      <ToggleButton Content="U" ToolTipService.ToolTip="Blue" IsChecked="{x:Bind CardFilter.Blue, Mode=TwoWay}"/>
                      <ToggleButton Content="B" ToolTipService.ToolTip="Black" IsChecked="{x:Bind CardFilter.Black, Mode=TwoWay}"/>
                      <ToggleButton Content="R" ToolTipService.ToolTip="Red" IsChecked="{x:Bind CardFilter.Red, Mode=TwoWay}"/>
                      <ToggleButton Content="G" ToolTipService.ToolTip="Green" IsChecked="{x:Bind CardFilter.Green, Mode=TwoWay}"/>
                      <ToggleButton Content="C" ToolTipService.ToolTip="Colorless" IsChecked="{x:Bind CardFilter.Colorless, Mode=TwoWay}"/>
                    </StackPanel>
                    <RadioButtons Header="Color group" MaxColumns="3" SelectedIndex="0">
                      <RadioButton Content="All" GroupName="ColorGroup" IsChecked="{x:Bind CardFilter.ColorGroup, Converter={StaticResource CardColorGroupToBoolConverter}, ConverterParameter=All, Mode=OneWay}" Command="{x:Bind CardFilter.ChangeColorGroupCommand, Mode=OneTime}" CommandParameter="All"/>
                      <RadioButton Content="Mono" GroupName="ColorGroup" IsChecked="{x:Bind CardFilter.ColorGroup, Converter={StaticResource CardColorGroupToBoolConverter}, ConverterParameter=Mono, Mode=OneWay}" Command="{x:Bind CardFilter.ChangeColorGroupCommand, Mode=OneTime}" CommandParameter="Mono"/>
                      <RadioButton Content="Multi" GroupName="ColorGroup" IsChecked="{x:Bind CardFilter.ColorGroup, Converter={StaticResource CardColorGroupToBoolConverter}, ConverterParameter=Multi, Mode=OneWay}" Command="{x:Bind CardFilter.ChangeColorGroupCommand, Mode=OneTime}" CommandParameter="Multi"/>
                    </RadioButtons>
                    <Button Content="Reset filters" Command="{x:Bind CardFilter.ResetCommand, Mode=OneTime}"/>
                  </StackPanel>
                </Flyout>
              </AppBarButton.Flyout>
            </AppBarButton>
            <!--#endregion-->

            <!--#region Group View Controls -->
            <AppBarSeparator Visibility="{x:Bind DeckGroupViewVisible, Mode=OneWay}"/>
            <AppBarButton Visibility="{x:Bind DeckGroupViewVisible, Mode=OneWay}" Command="{x:Bind ViewModel.DeckCardList.AddGroupCommand, Mode=OneTime}" Icon="Add" Label="Add Group" />
            <!--#endregion-->

            <AppBarElementContainer VerticalAlignment="Center">
              <ProgressRing IsActive="{x:Bind ViewModel.IsBusy, Mode=OneWay}" Margin="5 0 5 0"/>
            </AppBarElementContainer>
          </CommandBar>
        </StackPanel>
        <!--#endregion-->

        <!--#region Deck Info -->
        <StackPanel Orientation="Vertical" VerticalAlignment="Bottom" HorizontalAlignment="Right">
          <TextBlock x:Name="SelectedDeckNameTitle" Text="{x:Bind ViewModel.Name, Mode=OneWay}" FontWeight="Bold" HorizontalAlignment="Right"/>
          <TextBlock Text="{x:Bind sys:String.Format('{0} cards', ViewModel.Size), Mode=OneWay}" HorizontalAlignment="Right"/>
          <StackPanel.ContextFlyout>
            <MenuFlyout AreOpenCloseAnimationsEnabled="False" Placement="Bottom">
              <MenuFlyoutItem Command="{x:Bind ViewModel.DeckCardList.ImportCardsCommand, Mode=OneTime}" Text="Import..."/>
              <MenuFlyoutSubItem Text="Export...">
                <MenuFlyoutItem Command="{x:Bind ViewModel.DeckCardList.ExportCardsCommand, Mode=OneTime}" CommandParameter="Name" Text="By Name"/>
                <MenuFlyoutItem Command="{x:Bind ViewModel.DeckCardList.ExportCardsCommand, Mode=OneTime}" CommandParameter="Id" Text="By Id"/>
              </MenuFlyoutSubItem>
              <MenuFlyoutItem Command="{x:Bind ViewModel.DeckCardList.ClearCommand, Mode=OneTime}" Text="Clear" Background="IndianRed"/>
            </MenuFlyout>
          </StackPanel.ContextFlyout>
        </StackPanel>
        <!--#endregion-->

      </Grid>
      <!--#endregion-->

      <!--#region Deck Card Views -->
      <Grid controls:DockPanel.Dock="Top">

        <!--#region Group View -->
        <Grid 
          x:Name="DeckCardsGroupView"
          x:Load="{x:Bind DeckGroupViewVisible, Mode=OneWay}"
          DataContext="{x:Bind ViewModel.DeckCardList, Mode=OneWay}">
          <ScrollViewer VerticalScrollBarVisibility="Auto">
            <ItemsControl ItemsSource="{Binding Groups, Mode=OneWay}" Margin="10">
              <ItemsControl.ItemTemplate>
                <DataTemplate x:DataType="viewmodels:CardGroupViewModel">
                  <StackPanel Orientation="Vertical" HorizontalAlignment="Stretch">
                    <customControls:CustomExpander IsExpanded="True" HorizontalAlignment="Stretch">
                      <customControls:CustomExpander.Header>
                        <Grid HorizontalAlignment="Stretch">
                          <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" MaxWidth="600"/>
                          </Grid.ColumnDefinitions>
                          <controls1:CardGroupViewGroupHeader
                            ui:FrameworkElementExtensions.AncestorType="customControls:CustomExpander"
                            d:DataContext="{d:DesignInstance Type=viewmodels:GroupedCardListViewModel}"
                            Grid.Column="0"
                            IsExpanded="{Binding (ui:FrameworkElementExtensions.Ancestor).IsExpanded, RelativeSource={RelativeSource Mode=Self}, Mode=OneWay}"
                            PrimaryHeader="{x:Bind Key, Mode=OneWay, Converter={StaticResource StringOrDefaultConverter}, ConverterParameter='Other'}"
                            SecondaryHeader="{x:Bind Count, Mode=OneWay}"
                            Margin="0 0 0 5">
                            <controls1:CardGroupViewGroupHeader.ContextFlyout>
                              <MenuFlyout AreOpenCloseAnimationsEnabled="False" Placement="Bottom">
                                <MenuFlyoutItem 
                                  Command="{x:Bind RenameGroupCommand, Mode=OneTime}"
                                  Text="Rename"/>
                                <MenuFlyoutSeparator/>
                                <MenuFlyoutItem 
                                  Command="{Binding RemoveGroupCommand, Mode=OneTime}" 
                                  CommandParameter="{x:Bind Key, Mode=OneWay}" 
                                  Text="Remove"
                                  Background="IndianRed"/>
                              </MenuFlyout>
                            </controls1:CardGroupViewGroupHeader.ContextFlyout>
                          </controls1:CardGroupViewGroupHeader>
                        </Grid>
                      </customControls:CustomExpander.Header>
                      <customControls:CustomExpander.Content>
                        <cardlistview:AdvancedAdaptiveGroupedCardGridView
                          d:DataContext="{d:DesignInstance Type=viewmodels:GroupedCardListViewModel}"
                          DataContext="{Binding ElementName=DeckCardsGroupView, Path=DataContext, Mode=OneWay}"
                          ItemsSource="{Binding ElementName=CardCollectionSource, Path=View, Mode=OneWay}"
                          Style="{StaticResource MTGAdaptiveGridViewStyle}"
                          BorderBrush="{ThemeResource RegionColor}"
                          SelectionMode="Single"
                          Padding="0"
                          Margin="0 0 0 10"
                          DesiredWidth="{Binding ElementName=CardViewImageSizeSlider, Path=Value, Mode=OneWay}"
                          MinHeight="200"
                          AllowDrop="True"
                          CanDragItems="True"
                          OnDropCopy="{x:Bind AddCardToGroupCommand, Mode=OneTime}"
                          OnDropBeginMoveFrom="{x:Bind BeginMoveFromCommand, Mode=OneTime}"
                          OnDropBeginMoveTo="{x:Bind BeginMoveToCommand, Mode=OneTime}"
                          OnDropExecuteMove="{x:Bind ExecuteMoveCommand, Mode=OneTime}"
                          OnDropImport="{x:Bind ImportCardsToGroupCommand, Mode=OneTime}"
                          LosingFocus="ListView_LosingFocus">
                          <cardlistview:AdvancedAdaptiveGroupedCardGridView.Resources>
                            <customControls:BindableCollectionView 
                              x:Name="CardCollectionSource" Source="{x:Bind Cards, Mode=OneTime}"
                              Filter="{Binding ElementName=Root, Path=CardFilter.ValidationPredicate, Mode=OneWay}"
                              SortComparer="{Binding ElementName=Root, Path=CardSorter.SortProperties.Comparer, Mode=OneWay}"/>
                          </cardlistview:AdvancedAdaptiveGroupedCardGridView.Resources>
                          <cardlistview:AdvancedAdaptiveGroupedCardGridView.ItemContainerStyle>
                            <Style TargetType="GridViewItem" BasedOn="{StaticResource DefaultGridViewItemStyle}">
                              <Setter Property="Margin" Value="0"/>
                            </Style>
                          </cardlistview:AdvancedAdaptiveGroupedCardGridView.ItemContainerStyle>
                          <cardlistview:AdvancedAdaptiveGroupedCardGridView.KeyboardAccelerators>
                            <KeyboardAccelerator Key="Delete" Invoked="DeleteCardKeyboardAccelerator_Invoked"/>
                          </cardlistview:AdvancedAdaptiveGroupedCardGridView.KeyboardAccelerators>
                          <cardlistview:AdvancedAdaptiveGroupedCardGridView.ItemTemplate>
                            <DataTemplate x:DataType="models:DeckEditorMTGCard">
                              <cardview:DeckEditorCardImageView
                                d:DataContext="{d:DesignInstance Type=viewmodels:GroupedCardListViewModel}"
                                DataContext="{Binding ElementName=DeckCardsGroupView, Path=DataContext, Mode=OneTime}"
                                Model="{x:Bind Mode=OneTime}"
                                DeleteButtonClick="{Binding RemoveCardCommand, Mode=OneTime}"
                                CountChangeCommand="{Binding ChangeCardCountCommand, Mode=OneTime}"
                                ChangePrintCommand="{Binding ChangeCardPrintCommand, Mode=OneTime}"/>
                            </DataTemplate>
                          </cardlistview:AdvancedAdaptiveGroupedCardGridView.ItemTemplate>
                        </cardlistview:AdvancedAdaptiveGroupedCardGridView>
                      </customControls:CustomExpander.Content>
                    </customControls:CustomExpander>
                  </StackPanel>
                </DataTemplate>
              </ItemsControl.ItemTemplate>
            </ItemsControl>
          </ScrollViewer>
        </Grid>
        <!--#endregion-->

        <!--#region Grid View -->
        <cardlistview:AdvancedAdaptiveCardGridView
            x:Name="DeckCardsGridView"
            x:Load="{x:Bind DeckImageViewVisible, Mode=OneWay}"
            DataContext="{x:Bind ViewModel.DeckCardList, Mode=OneWay}"
            ItemsSource="{x:Bind DeckCardsGridViewCollectionSource.View, Mode=OneWay}"
            Style="{StaticResource MTGAdaptiveGridViewStyle}"
            BorderBrush="{ThemeResource RegionColor}"
            SelectionMode="Single"
            BorderThickness="0"
            DesiredWidth="{Binding ElementName=CardViewImageSizeSlider, Path=Value, Mode=OneWay}"
            CanDragItems="True"
            AllowDrop="True"
            OnDropCopy="{x:Bind ViewModel.DeckCardList.AddCardCommand, Mode=OneTime}"
            OnDropImport="{x:Bind ViewModel.DeckCardList.ImportCardsCommand, Mode=OneTime}"
            OnDropBeginMoveFrom="{x:Bind ViewModel.DeckCardList.BeginMoveFromCommand, Mode=OneTime}"
            OnDropBeginMoveTo="{x:Bind ViewModel.DeckCardList.BeginMoveToCommand, Mode=OneTime}"
            OnDropExecuteMove="{x:Bind ViewModel.DeckCardList.ExecuteMoveCommand, Mode=OneTime}"
            LosingFocus="ListView_LosingFocus">
          <cardlistview:AdvancedAdaptiveCardGridView.Resources>
            <customControls:BindableCollectionView 
              x:Name="DeckCardsGridViewCollectionSource" Source="{x:Bind ViewModel.DeckCardList.Cards, Mode=OneWay}"
              Filter="{x:Bind CardFilter.ValidationPredicate, Mode=OneWay}"
              SortComparer="{x:Bind CardSorter.SortProperties.Comparer, Mode=OneWay}"/>
          </cardlistview:AdvancedAdaptiveCardGridView.Resources>
          <cardlistview:AdvancedAdaptiveCardGridView.KeyboardAccelerators>
            <KeyboardAccelerator Key="Delete" Invoked="DeleteCardKeyboardAccelerator_Invoked"/>
          </cardlistview:AdvancedAdaptiveCardGridView.KeyboardAccelerators>
          <cardlistview:AdvancedAdaptiveCardGridView.ItemTemplate>
            <DataTemplate x:DataType="models:DeckEditorMTGCard">
              <cardview:DeckEditorCardImageView
                  d:DataContext="{d:DesignInstance Type=viewmodels:CardListViewModel}"
                  DataContext="{Binding ElementName=DeckCardsGridView, Path=DataContext, Mode=OneTime}"
                  Model="{x:Bind Mode=OneTime}"
                  DeleteButtonClick="{Binding RemoveCardCommand, Mode=OneTime}"
                  CountChangeCommand="{Binding ChangeCardCountCommand, Mode=OneTime}"
                  ChangePrintCommand="{Binding ChangeCardPrintCommand, Mode=OneTime}"/>
            </DataTemplate>
          </cardlistview:AdvancedAdaptiveCardGridView.ItemTemplate>
        </cardlistview:AdvancedAdaptiveCardGridView>
        <!--#endregion-->

        <!--#region List View -->
        <cardlistview:AdvancedCardListView
            x:Name="DeckCardsListView"
            x:Load="{x:Bind DeckTextViewVisible, Mode=OneWay}"
            DataContext="{x:Bind ViewModel.DeckCardList, Mode=OneWay}"
            ItemsSource="{x:Bind DeckCardsListViewCollectionSource.View, Mode=OneWay}"
            ItemContainerStyle="{StaticResource MTGListViewItemContainerStyle}"
            SelectionMode="Single"
            CanDragItems="True"
            AllowDrop="True"
            OnDropCopy="{x:Bind ViewModel.DeckCardList.AddCardCommand, Mode=OneTime}"
            OnDropImport="{x:Bind ViewModel.DeckCardList.ImportCardsCommand, Mode=OneTime}"
            OnDropBeginMoveFrom="{x:Bind ViewModel.DeckCardList.BeginMoveFromCommand, Mode=OneTime}"
            OnDropBeginMoveTo="{x:Bind ViewModel.DeckCardList.BeginMoveToCommand, Mode=OneTime}"
            OnDropExecuteMove="{x:Bind ViewModel.DeckCardList.ExecuteMoveCommand, Mode=OneTime}"
            LosingFocus="ListView_LosingFocus">
          <cardlistview:AdvancedCardListView.Resources>
            <customControls:BindableCollectionView 
              x:Name="DeckCardsListViewCollectionSource" Source="{x:Bind ViewModel.DeckCardList.Cards, Mode=OneWay}"
              Filter="{x:Bind CardFilter.ValidationPredicate, Mode=OneWay}"
              SortComparer="{x:Bind CardSorter.SortProperties.Comparer, Mode=OneWay}"/>
          </cardlistview:AdvancedCardListView.Resources>
          <cardlistview:AdvancedCardListView.KeyboardAccelerators>
            <KeyboardAccelerator Key="Delete" Invoked="DeleteCardKeyboardAccelerator_Invoked"/>
          </cardlistview:AdvancedCardListView.KeyboardAccelerators>
          <cardlistview:AdvancedCardListView.ItemTemplate>
            <DataTemplate x:DataType="models:DeckEditorMTGCard">
              <cardview:DeckEditorCardTextView
                  d:DataContext="{d:DesignInstance Type=viewmodels:CardListViewModel}"
                  DataContext="{Binding ElementName=DeckCardsListView, Path=DataContext, Mode=OneTime}"
                  Model="{x:Bind Mode=OneTime}" 
                  HoverPreviewEnabled="True"
                  DeleteButtonClick="{Binding RemoveCardCommand, Mode=OneTime}"
                  CountChangeCommand="{Binding ChangeCardCountCommand, Mode=OneTime}"
                  ChangePrintCommand="{Binding ChangeCardPrintCommand, Mode=OneTime}"/>
            </DataTemplate>
          </cardlistview:AdvancedCardListView.ItemTemplate>
        </cardlistview:AdvancedCardListView>
        <!--#endregion-->

      </Grid>
      <!--#endregion-->

    </controls:DockPanel>
  </Grid>
</Page>
