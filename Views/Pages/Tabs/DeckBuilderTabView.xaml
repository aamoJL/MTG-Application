<UserControl
  x:Class="MTGApplication.Views.DeckBuilderTabView"
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
  xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
  xmlns:controls="using:CommunityToolkit.WinUI.UI.Controls"
  xmlns:ui="using:CommunityToolkit.WinUI.UI" 
  xmlns:sys="using:System" 
  xmlns:viewmodels="using:MTGApplication.ViewModels" 
  xmlns:helpers="using:MTGApplication.Views.BindingHelpers"
  xmlns:customcontrols="using:MTGApplication.Views.Controls"
  xmlns:triggers="using:CommunityToolkit.WinUI.UI.Triggers" 
  xmlns:lvc="using:LiveChartsCore.SkiaSharpView.WinUI"
  mc:Ignorable="d">

  <UserControl.Resources>
    <!--Search-->
    <DataTemplate x:Key="SearchImageViewItemTemplate" x:DataType="viewmodels:MTGCardViewModel">
      <StackPanel 
        Orientation="Vertical" 
        PointerEntered="CardGridViewItem_PointerEntered" 
        PointerExited="CardGridViewItem_PointerExited">
        <Grid>
          <controls:ImageEx 
            Source="{x:Bind SelectedFaceUri, Mode=OneWay}"
            Style="{StaticResource PlaceholderImageStyle}">
            <controls:ImageEx.ContextFlyout>
              <MenuFlyout AreOpenCloseAnimationsEnabled="False">
                <MenuFlyoutItem Command="{x:Bind FlipCardCommand}" Icon="sync" Text="Flip"/>
                <MenuFlyoutSeparator />
                <MenuFlyoutItem Command="{x:Bind OpenAPIWebsiteCommand}" Icon="world" Text="{x:Bind ModelAPIName}"/>
                <MenuFlyoutItem Command="{x:Bind OpenCardmarketWebsiteCommand}" Icon="{ui:FontIcon Glyph=&#xE7BF;}" Text="Cardmarket"/>
              </MenuFlyout>
            </controls:ImageEx.ContextFlyout>
          </controls:ImageEx>
          <!--<StackPanel Spacing="10" Orientation="Vertical" HorizontalAlignment="Right" VerticalAlignment="Top" Padding="10 45 20 10" Visibility="{Binding ControlsVisible}">
            <Button Background="White" Content="{ui:FontIcon Glyph=&#xECC8;}" Command="{Binding ElementName=MainPageContainer, Path=DataContext.DeckViewModel.AddViewModelCommand}" CommandParameter="{Binding}"/>
            <Button Background="White" Content="{ui:FontIcon Glyph=&#xF142;}" Command="{Binding ElementName=MainPageContainer, Path=DataContext.DeckMaybelistViewModel.AddViewModelCommand}" CommandParameter="{Binding}"/>
            <Button Background="White" Content="{ui:FontIcon Glyph=&#xE7BF;}" Command="{Binding ElementName=MainPageContainer, Path=DataContext.DeckWishlistViewModel.AddViewModelCommand}" CommandParameter="{Binding}"/>
          </StackPanel>-->
        </Grid>
        <TextBlock Text="{x:Bind helpers:Format.EuroToString(Model.Info.Price)}" HorizontalAlignment="Center" FontSize="11"/>
      </StackPanel>
    </DataTemplate>
    <DataTemplate x:Key="SearchListViewItemTemplate" x:DataType="viewmodels:MTGCardViewModel">
      <StackPanel 
        Style="{StaticResource MTGListViewItemStyle}"
        PointerEntered="CardListViewItem_PointerEntered"
        PointerExited="CardListViewItem_PointerExited"
        PointerMoved="CardListViewItem_PointerMoved">
        <StackPanel.ContextFlyout>
          <MenuFlyout Placement="RightEdgeAlignedTop" AreOpenCloseAnimationsEnabled="False">
            <MenuFlyoutItem Command="{x:Bind FlipCardCommand}" Icon="sync" Text="Flip"/>
            <MenuFlyoutSeparator />
            <MenuFlyoutItem Command="{x:Bind OpenAPIWebsiteCommand}" Icon="world" Text="{x:Bind ModelAPIName}"/>
            <MenuFlyoutItem Command="{x:Bind OpenCardmarketWebsiteCommand}" Icon="{ui:FontIcon Glyph=&#xE7BF;}" Text="Cardmarket"/>
          </MenuFlyout>
        </StackPanel.ContextFlyout>
        <Image Width="20" Source="{x:Bind Model.Info.SetIconUri}"/>
        <TextBlock VerticalAlignment="Center" Text="{x:Bind Model.Info.Name}" Width="200"/>
        <TextBlock VerticalAlignment="Center" Text="{x:Bind Model.Info.TypeLine}" Width="250"/>
        <TextBlock VerticalAlignment="Center" Text="{x:Bind helpers:Format.EuroToString(Model.Info.Price)}"/>
      </StackPanel>
    </DataTemplate>
    <!--Deck-->
    <DataTemplate x:Key="DeckListViewItemTemplate" x:DataType="viewmodels:MTGCardViewModel">
      <StackPanel 
        Style="{StaticResource MTGListViewItemStyle}"
        PointerEntered="CardListViewItem_PointerEntered"
        PointerExited="CardListViewItem_PointerExited"
        PointerMoved="CardListViewItem_PointerMoved">
        <StackPanel.ContextFlyout>
          <MenuFlyout Placement="RightEdgeAlignedTop" AreOpenCloseAnimationsEnabled="False">
            <MenuFlyoutItem Command="{x:Bind FlipCardCommand}" Icon="sync" Text="Flip"/>
            <MenuFlyoutItem Command="{x:Bind IncreaseCountCommand}" Icon="Add" Text="Add"/>
            <MenuFlyoutItem Command="{x:Bind DecreaseCountCommand}" Icon="Remove" Text="Remove"/>
            <MenuFlyoutSeparator />
            <MenuFlyoutItem Command="{x:Bind OpenAPIWebsiteCommand}" Icon="world" Text="{x:Bind ModelAPIName}"/>
            <MenuFlyoutItem Command="{x:Bind OpenCardmarketWebsiteCommand}" Icon="{ui:FontIcon Glyph=&#xE7BF;}" Text="Cardmarket"/>
            <MenuFlyoutSeparator />
            <MenuFlyoutItem Command="{x:Bind DeleteCardCommand}" CommandParameter="{Binding Model}" Background="IndianRed" Icon="delete" Text="Delete"/>
          </MenuFlyout>
        </StackPanel.ContextFlyout>
        <TextBlock VerticalAlignment="Center" Text="{x:Bind Model.Count, Mode=OneWay}" Width="30"/>
        <Image Width="20" Source="{x:Bind Model.Info.SetIconUri}"/>
        <TextBlock VerticalAlignment="Center" Text="{x:Bind Model.Info.Name}" Width="200"/>
        <TextBlock VerticalAlignment="Center" Text="{x:Bind Model.Info.TypeLine}" Width="250"/>
        <TextBlock VerticalAlignment="Center" Text="{x:Bind helpers:Format.EuroToString(Model.Info.Price)}"/>
      </StackPanel>
    </DataTemplate>
    <DataTemplate x:Key="DeckImageViewItemTemplate" x:DataType="viewmodels:MTGCardViewModel">
      <StackPanel x:Name="DeckGridViewItem" Background="Transparent" CornerRadius="10" Orientation="Vertical" PointerEntered="CardGridViewItem_PointerEntered" PointerExited="CardGridViewItem_PointerExited">
        <Grid>
          <controls:ImageEx Style="{StaticResource PlaceholderImageStyle}" Source="{x:Bind SelectedFaceUri, Mode=OneWay}">
            <controls:ImageEx.ContextFlyout>
              <MenuFlyout Placement="RightEdgeAlignedTop" AreOpenCloseAnimationsEnabled="False">
                <MenuFlyoutItem Command="{x:Bind FlipCardCommand}" Icon="sync" Text="Flip"/>
                <MenuFlyoutItem Command="{x:Bind IncreaseCountCommand}" Icon="Add" Text="Add"/>
                <MenuFlyoutItem Command="{x:Bind DecreaseCountCommand}" Icon="Remove" Text="Remove"/>
                <MenuFlyoutSeparator />
                <MenuFlyoutItem Command="{x:Bind OpenAPIWebsiteCommand}" Icon="world" Text="{x:Bind ModelAPIName}"/>
                <MenuFlyoutItem Command="{x:Bind OpenCardmarketWebsiteCommand}" Icon="{ui:FontIcon Glyph=&#xE7BF;}" Text="Cardmarket"/>
                <MenuFlyoutSeparator />
                <MenuFlyoutItem Command="{x:Bind DeleteCardCommand}" CommandParameter="{Binding Model}" Background="IndianRed" Icon="delete" Text="Delete"/>
              </MenuFlyout>
            </controls:ImageEx.ContextFlyout>
          </controls:ImageEx>

          <!--<StackPanel Spacing="10" Orientation="Vertical" HorizontalAlignment="Right" VerticalAlignment="Top" Padding="10 45 20 10" Visibility="{Binding ControlsVisible}">
                      <Button Background="White" Content="{ui:FontIcon Glyph=&#xF142;}" Command="{Binding ElementName=MainPageContainer, Path=DataContext.DeckMaybelistViewModel.AddViewModelCommand}" CommandParameter="{Binding}"/>
                      <Button Background="White" Content="{ui:FontIcon Glyph=&#xE7BF;}" Command="{Binding ElementName=MainPageContainer, Path=DataContext.DeckWishlistViewModel.AddViewModelCommand}" CommandParameter="{Binding}"/>
                    </StackPanel>-->
        </Grid>
        <Grid>
          <TextBlock Text="{x:Bind helpers:Format.EuroToString(Model.Info.Price)}" HorizontalAlignment="Right" FontSize="11"/>
          <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
            <!--<Button x:Name="DecreaseButton" Command="{x:Bind DecreaseCountCommand}" Visibility="{Binding ControlsVisible, Mode=OneWay}">
                        <SymbolIcon Symbol="Back" />
                      </Button>-->
            <TextBlock Text="{Binding Model.Count}" Margin="20 5 20 10" VerticalAlignment="Center" FontSize="16" FontWeight="SemiBold"/>
            <!--<Button Command="{Binding IncreaseCountCommand}" Visibility="{Binding ControlsVisible, Mode=OneWay}">
                        <SymbolIcon Symbol="Forward" />
                      </Button>-->
          </StackPanel>
        </Grid>
      </StackPanel>
    </DataTemplate>
  </UserControl.Resources>

  <Grid>
    <VisualStateManager.VisualStateGroups>
      
      <VisualStateGroup x:Name="CardSearchDisplayStates">
        <VisualState>
          <VisualState.StateTriggers>
            <triggers:IsEqualStateTrigger Value="{Binding ElementName=CardSearchImagesCheck, Path=IsChecked, Mode=OneWay}" To="True"/>
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="CardSearchImagesDisplay.Visibility" Value="Visible"/>
          </VisualState.Setters>
        </VisualState>
        <VisualState>
          <VisualState.StateTriggers>
            <triggers:IsEqualStateTrigger Value="{Binding ElementName=CardSearchListCheck, Path=IsChecked, Mode=OneWay}" To="True"/>
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="CardSearchListDisplay.Visibility" Value="Visible"/>
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
      
      <VisualStateGroup x:Name="DeckDisplayStates">
        <VisualState>
          <VisualState.StateTriggers>
            <triggers:IsEqualStateTrigger Value="{Binding ElementName=DeckImagesCheck, Path=IsChecked, Mode=OneWay}" To="True"/>
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="DeckImagesDisplay.Visibility" Value="Visible"/>
          </VisualState.Setters>
        </VisualState>
        <VisualState>
          <VisualState.StateTriggers>
            <triggers:IsEqualStateTrigger Value="{Binding ElementName=DeckListCheck, Path=IsChecked, Mode=OneWay}" To="True"/>
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="DeckListDisplay.Visibility" Value="Visible"/>
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
      
      <VisualStateGroup x:Name="DeckNameTitleSaveStatus">
        <VisualState>
          <VisualState.StateTriggers>
            <triggers:IsEqualStateTrigger Value="{x:Bind DeckBuilderViewModel.HasUnsavedChanges, Mode=OneWay}" To="True"/>
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="SelectedDeckNameTitle.Foreground" Value="Red"/>
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
      
    </VisualStateManager.VisualStateGroups>

    <SplitView PaneBackground="Transparent" IsPaneOpen="{x:Bind SearchPanelOpen,Mode=OneWay}" OpenPaneLength="780" CompactPaneLength="48" DisplayMode="CompactInline">
      <!--Search Panel-->
      <SplitView.Pane>
        <controls:DockPanel LastChildFill="True">
          <!--Side Button-->
          <StackPanel controls:DockPanel.Dock="Left" Orientation="Vertical">
            <AppBarButton 
              Command="{x:Bind SwitchSearchPanelCommand}"
              VerticalAlignment="Top"
              Label="Search"
              Width="50"
              CornerRadius="0" 
              Margin="0 0 0 0" 
              Padding="0 0 0 0" 
              BorderThickness="0">
              <AppBarButton.Icon>
                <FontIcon Glyph="&#xE721;"/>
              </AppBarButton.Icon>
            </AppBarButton>
          </StackPanel>
          <!--Search-->
          <controls:DockPanel controls:DockPanel.Dock="Left" Grid.Column="0" LastChildFill="True" Padding="10 0 10 10" Background="Transparent">
            <customcontrols:ScryfallSearchBarControl controls:DockPanel.Dock="Top" Margin="0 10 0 0" SearchSubmitCommand="{x:Bind SearchViewModel.SearchSubmitCommand}" SearchQuery="{x:Bind SearchViewModel.SearchQuery, Mode=TwoWay}"/>
            <!--Scryfall commands-->
            <Grid controls:DockPanel.Dock="Top">
              <StackPanel Orientation="Horizontal">
                <CommandBar IsOpen="False" DefaultLabelPosition="Right" HorizontalAlignment="Left">
                  <AppBarButton Icon="ZoomIn" Label="Zoom">
                    <AppBarButton.Flyout>
                      <Flyout AreOpenCloseAnimationsEnabled="False">
                        <Slider Header="Card size" Value="{x:Bind SearchDesiredItemWidth, Mode=TwoWay}" Width="200" HorizontalAlignment="Left" Maximum="350" Minimum="140" SnapsTo="Ticks" TickFrequency="10" TickPlacement="Outside"/>
                      </Flyout>
                    </AppBarButton.Flyout>
                  </AppBarButton>
                  <AppBarButton Icon="PreviewLink" ToolTipService.ToolTip="Display" Label="Display">
                    <AppBarButton.Flyout>
                      <MenuFlyout AreOpenCloseAnimationsEnabled="False">
                        <RadioMenuFlyoutItem x:Name="CardSearchImagesCheck" Text="Images" GroupName="CardSearchDisplayCheck" IsChecked="True" Icon="{ui:SymbolIcon Symbol=Pictures}" />
                        <RadioMenuFlyoutItem x:Name="CardSearchListCheck" Text="List" GroupName="CardSearchDisplayCheck" Icon="{ui:SymbolIcon Symbol=List}" />
                      </MenuFlyout>
                    </AppBarButton.Flyout>
                  </AppBarButton>
                </CommandBar>
                <ProgressRing IsActive="{x:Bind SearchViewModel.IsBusy, Mode=OneWay}"/>
              </StackPanel>
              <TextBlock Text="{x:Bind sys:String.Format('{0} cards', SearchViewModel.SearchCards.Count), Mode=OneWay}" HorizontalAlignment="Right" VerticalAlignment="Bottom"/>
            </Grid>
            <!--Scryfall Card view-->
            <Grid controls:DockPanel.Dock="Top">
              <!--Grid view-->
              <controls:AdaptiveGridView
                x:Name="CardSearchImagesDisplay"
                Style="{StaticResource MTGAdaptiveGridViewStyle}"
                SelectionMode="None"
                DesiredWidth="{x:Bind SearchDesiredItemWidth, Mode=TwoWay}"
                ItemsSource="{x:Bind SearchViewModel.SearchCards}"
                Visibility="Collapsed"
                CanDragItems="True"
                DragItemsStarting="CardView_DragItemsStarting"
                ItemTemplate="{StaticResource SearchImageViewItemTemplate}" />
              <!--List view-->
              <ListView
                x:Name="CardSearchListDisplay"
                Style="{StaticResource MTGListViewStyle}"
                SelectionMode="Single"
                ItemsSource="{x:Bind SearchViewModel.SearchCards}"
                Visibility="Collapsed"
                CanDragItems="True"
                DragItemsStarting="CardView_DragItemsStarting"
                ItemTemplate="{StaticResource SearchListViewItemTemplate}" />
            </Grid>
          </controls:DockPanel>
        </controls:DockPanel>
      </SplitView.Pane>
      <!--Deck-->
      <Grid BorderThickness="16 0 0 0" BorderBrush="{ThemeResource ApplicationPageBackgroundThemeBrush}" Padding="10 0 0 0">
        <controls:DockPanel LastChildFill="True" Padding="0 0 10 10">
          <!--Sidebar-->
          <TabView controls:DockPanel.Dock="Right" IsAddTabButtonVisible="False" Width="250" Margin="10 10 0 0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
            <TabView.TabItems>
              <TabViewItem Header="Side lists" IsClosable="False">
                <!--Side lists-->
                <Grid RowSpacing="5" Margin="0 5 0 0">
                  <Grid.RowDefinitions>
                    <RowDefinition Height="auto"/>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="auto"/>
                    <RowDefinition Height="*"/>
                  </Grid.RowDefinitions>
                  <TextBlock Grid.Row="0" Text="Maybe">
                    <TextBlock.ContextFlyout>
                      <MenuFlyout AreOpenCloseAnimationsEnabled="False">
                        <MenuFlyoutItem Command="{x:Bind DeckBuilderViewModel.MaybelistCards.ImportToCardlistDialogCommand}" Text="Import..."/>
                        <MenuFlyoutItem Command="{x:Bind DeckBuilderViewModel.MaybelistCards.ExportDeckCardsDialogCommand}" Text="Export..."/>
                      </MenuFlyout>
                    </TextBlock.ContextFlyout>
                  </TextBlock>
                  <ListView
                    Grid.Row="1"
                    x:Name="DeckMaybeDisplay"
                    DataContext="{x:Bind DeckBuilderViewModel.MaybelistCards}"
                    ItemsSource="{Binding CardViewModels}"
                    Style="{StaticResource MTGListViewStyle}"
                    SelectionMode="Single"
                    CanDragItems="True"
                    AllowDrop="True"
                    DragOver="CardView_DragOver"
                    Drop="CardView_Drop"
                    DragItemsStarting="CardView_DragItemsStarting"
                    DragItemsCompleted="CardView_DragItemsCompleted" 
                    ItemTemplate="{StaticResource DeckListViewItemTemplate}"/>
                  <TextBlock Grid.Row="2" Text="Wishlist">
                    <TextBlock.ContextFlyout>
                      <MenuFlyout AreOpenCloseAnimationsEnabled="False">
                        <MenuFlyoutItem Command="{x:Bind DeckBuilderViewModel.WishlistCards.ImportToCardlistDialogCommand}" Text="Import..."/>
                        <MenuFlyoutItem Command="{x:Bind DeckBuilderViewModel.WishlistCards.ExportDeckCardsDialogCommand}" Text="Export..."/>
                      </MenuFlyout>
                    </TextBlock.ContextFlyout>
                  </TextBlock>
                  <ListView
                    Grid.Row="3"
                    x:Name="DeckWishlistDisplay"
                    DataContext="{x:Bind DeckBuilderViewModel.WishlistCards}"
                    ItemsSource="{Binding CardViewModels}"
                    Style="{StaticResource MTGListViewStyle}"
                    SelectionMode="Single"
                    CanDragItems="True"
                    AllowDrop="True"
                    DragOver="CardView_DragOver"
                    Drop="CardView_Drop"
                    DragItemsStarting="CardView_DragItemsStarting"
                    DragItemsCompleted="CardView_DragItemsCompleted"
                    ItemTemplate="{StaticResource DeckListViewItemTemplate}"/>
                </Grid>
              </TabViewItem>
              <TabViewItem Header="Info" IsClosable="False">
                <ScrollViewer VerticalScrollBarVisibility="Auto">
                  <StackPanel Margin="0 5 0 0" Orientation="Vertical">
                    <TextBlock>
                        <Run Text="Price:" />
                        <Run Text="{x:Bind helpers:Format.EuroToString(DeckBuilderViewModel.DeckCards.EuroPrice), Mode=OneWay}" />
                    </TextBlock>
                    <Border BorderThickness="0,1,0,0" BorderBrush="LightGray" Margin="10"/>
                    <!--Charts-->
                    <TextBlock Text="Mana Curve" TextAlignment="Center"/>
                    <lvc:CartesianChart Height="250" DataContext="{x:Bind DeckBuilderViewModel.CMCChart, Mode=OneWay}" Series="{Binding Series}"/>
                    <Border BorderThickness="0,1,0,0" BorderBrush="LightGray" Margin="10"/>
                    <TextBlock Text="Type Chart" TextAlignment="Center"/>
                    <lvc:PieChart Height="170" DataContext="{x:Bind DeckBuilderViewModel.SpellTypeChart, Mode=OneWay}" Series="{Binding Series}"/>
                    <Border BorderThickness="0,1,0,0" BorderBrush="LightGray" Margin="10"/>
                    <TextBlock Text="Color &amp; Mana Chart" TextAlignment="Center"/>
                    <Grid Height="170" Width="170" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0 10 0 10">
                      <lvc:PieChart DataContext="{x:Bind DeckBuilderViewModel.ColorChart, Mode=OneWay}" Series="{Binding Series}"/>
                      <lvc:PieChart Height="110" Width="110" DataContext="{x:Bind DeckBuilderViewModel.ManaProductionChart, Mode=OneWay}" Series="{Binding Series}"/>
                    </Grid>
                    <Border BorderThickness="0,1,0,0" BorderBrush="LightGray" Margin="10"/>
                  </StackPanel>
                </ScrollViewer>
              </TabViewItem>
            </TabView.TabItems>
          </TabView>
          <!--Commands-->
          <Grid controls:DockPanel.Dock="Top">
            <StackPanel Orientation="Horizontal">
              <CommandBar x:Name="DeckCommandBar" IsOpen="False" DefaultLabelPosition="Right">
                <AppBarButton Icon="OpenFile" Label="File">
                  <AppBarButton.Flyout>
                    <MenuFlyout AreOpenCloseAnimationsEnabled="False">
                      <MenuFlyoutItem Command="{x:Bind DeckBuilderViewModel.NewDeckDialogCommand}" Icon="NewFolder" Text="New">
                        <MenuFlyoutItem.KeyboardAccelerators>
                          <KeyboardAccelerator Key="N" Modifiers="Control"/>
                        </MenuFlyoutItem.KeyboardAccelerators>
                      </MenuFlyoutItem>
                      <MenuFlyoutItem Command="{x:Bind DeckBuilderViewModel.LoadDeckDialogCommand}" Icon="OpenFile" Text="Open...">
                        <MenuFlyoutItem.KeyboardAccelerators>
                          <KeyboardAccelerator Key="O" Modifiers="Control"/>
                        </MenuFlyoutItem.KeyboardAccelerators>
                      </MenuFlyoutItem>
                      <MenuFlyoutItem Command="{x:Bind DeckBuilderViewModel.SaveDeckDialogCommand}" Icon="Save" Text="Save...">
                        <MenuFlyoutItem.KeyboardAccelerators>
                          <KeyboardAccelerator Key="S" Modifiers="Control" IsEnabled="True"/>
                        </MenuFlyoutItem.KeyboardAccelerators>
                      </MenuFlyoutItem>
                      <MenuFlyoutSeparator/>
                      <MenuFlyoutSubItem Icon="{ui:FontIcon Glyph=&#xE8B5;}" Text="Import...">
                        <MenuFlyoutItem Command="{x:Bind DeckBuilderViewModel.DeckCards.ImportToCardlistDialogCommand}" Text="Deck"/>
                        <MenuFlyoutItem Command="{x:Bind DeckBuilderViewModel.MaybelistCards.ImportToCardlistDialogCommand}" Text="Maybe"/>
                        <MenuFlyoutItem Command="{x:Bind DeckBuilderViewModel.WishlistCards.ImportToCardlistDialogCommand}" Text="Wishlist"/>
                      </MenuFlyoutSubItem>
                      <MenuFlyoutSubItem Icon="{ui:FontIcon Glyph=&#xEDE1;}" Text="Export...">
                        <MenuFlyoutItem Command="{x:Bind DeckBuilderViewModel.DeckCards.ExportDeckCardsDialogCommand}" Text="Deck"/>
                        <MenuFlyoutItem Command="{x:Bind DeckBuilderViewModel.MaybelistCards.ExportDeckCardsDialogCommand}" Text="Maybe"/>
                        <MenuFlyoutItem Command="{x:Bind DeckBuilderViewModel.WishlistCards.ExportDeckCardsDialogCommand}" Text="Wishlist"/>
                      </MenuFlyoutSubItem>
                      <MenuFlyoutSeparator/>
                      <MenuFlyoutItem Command="{x:Bind DeckBuilderViewModel.DeleteDeckDialogCommand}" Background="IndianRed" Icon="Delete" Text="Delete"/>
                    </MenuFlyout>
                  </AppBarButton.Flyout>
                </AppBarButton>
                <AppBarSeparator />
                <AppBarButton Icon="ZoomIn" Label="Zoom">
                  <AppBarButton.Flyout>
                    <Flyout AreOpenCloseAnimationsEnabled="False">
                      <Slider Header="Card size" Value="{x:Bind DeckDesiredItemWidth, Mode=TwoWay}" Width="200" HorizontalAlignment="Left" Maximum="350" Minimum="140" SnapsTo="Ticks" TickFrequency="10" TickPlacement="Outside"/>
                    </Flyout>
                  </AppBarButton.Flyout>
                </AppBarButton>
                <AppBarButton Icon="PreviewLink" ToolTipService.ToolTip="Display" Label="Display">
                  <AppBarButton.Flyout>
                    <MenuFlyout AreOpenCloseAnimationsEnabled="False">
                      <RadioMenuFlyoutItem x:Name="DeckImagesCheck" Text="Images" GroupName="DeckDisplayCheck" IsChecked="True" Icon="{ui:SymbolIcon Symbol=Pictures}" />
                      <RadioMenuFlyoutItem x:Name="DeckListCheck" Text="List" GroupName="DeckDisplayCheck" Icon="{ui:SymbolIcon Symbol=List}" />
                    </MenuFlyout>
                  </AppBarButton.Flyout>
                </AppBarButton>
                <AppBarButton Icon="Sort" ToolTipService.ToolTip="Order" Label="Sort" AutomationProperties.Name="Order">
                  <AppBarButton.Flyout>
                    <MenuFlyout AreOpenCloseAnimationsEnabled="False">
                      <RadioMenuFlyoutItem Command="{x:Bind DeckBuilderViewModel.SortByDirectionCommand}" CommandParameter="ASC" Text="Asc" GroupName="DirectionGroup" IsChecked="True"/>
                      <RadioMenuFlyoutItem Command="{x:Bind DeckBuilderViewModel.SortByDirectionCommand}" CommandParameter="DESC" Text="Desc" GroupName="DirectionGroup" />
                      <MenuFlyoutSeparator/>
                      <RadioMenuFlyoutItem Command="{x:Bind DeckBuilderViewModel.SortByPropertyCommand}" CommandParameter="CMC" Text="CMC" GroupName="TypeGroup" IsChecked="True"/>
                      <RadioMenuFlyoutItem Command="{x:Bind DeckBuilderViewModel.SortByPropertyCommand}" CommandParameter="Name"  Text="Name" GroupName="TypeGroup"/>
                      <RadioMenuFlyoutItem Command="{x:Bind DeckBuilderViewModel.SortByPropertyCommand}" CommandParameter="Color" Text="Color" GroupName="TypeGroup"/>
                      <RadioMenuFlyoutItem Command="{x:Bind DeckBuilderViewModel.SortByPropertyCommand}" CommandParameter="Type" Text="Type" GroupName="TypeGroup"/>
                      <RadioMenuFlyoutItem Command="{x:Bind DeckBuilderViewModel.SortByPropertyCommand}" CommandParameter="Rarity" Text="Rarity" GroupName="TypeGroup"/>
                      <RadioMenuFlyoutItem Command="{x:Bind DeckBuilderViewModel.SortByPropertyCommand}" CommandParameter="Set" Text="Set" GroupName="TypeGroup"/>
                      <RadioMenuFlyoutItem Command="{x:Bind DeckBuilderViewModel.SortByPropertyCommand}" CommandParameter="Count" Text="Count" GroupName="TypeGroup"/>
                      <RadioMenuFlyoutItem Command="{x:Bind DeckBuilderViewModel.SortByPropertyCommand}" CommandParameter="Price" Text="Price" GroupName="TypeGroup"/>
                    </MenuFlyout>
                  </AppBarButton.Flyout>
                </AppBarButton>
              </CommandBar>
              <ProgressRing IsActive="{x:Bind Path=DeckBuilderViewModel.IsBusy, Mode=OneWay}"/>
            </StackPanel>
            <!--Info-->
            <StackPanel Orientation="Vertical" VerticalAlignment="Bottom" HorizontalAlignment="Right">
              <TextBlock x:Name="SelectedDeckNameTitle" Text="{x:Bind DeckBuilderViewModel.CardDeckName, Mode=OneWay}" FontWeight="Bold" HorizontalAlignment="Right"/>
              <TextBlock Text="{x:Bind sys:String.Format('{0} cards', DeckBuilderViewModel.DeckCards.CardlistSize), Mode=OneWay}" HorizontalAlignment="Right"/>
            </StackPanel>
          </Grid>
          <!--Deck View-->
          <Grid controls:DockPanel.Dock="Top">
            <controls:AdaptiveGridView
              x:Name="DeckImagesDisplay"
              Style="{StaticResource MTGAdaptiveGridViewStyle}"
              DataContext="{x:Bind DeckBuilderViewModel.DeckCards}"
              ItemsSource="{Binding CardViewModels}"
              DesiredWidth="{x:Bind DeckDesiredItemWidth, Mode=OneWay}"
              SelectionMode="None"
              Visibility="Collapsed"
              CanDragItems="True"
              AllowDrop="True"
              DragOver="CardView_DragOver"
              Drop="CardView_Drop"
              DragItemsStarting="CardView_DragItemsStarting"
              DragItemsCompleted="CardView_DragItemsCompleted" 
              ItemTemplate="{StaticResource DeckImageViewItemTemplate}"/>
            <ListView
              x:Name="DeckListDisplay"
              Style="{StaticResource MTGListViewStyle}"
              DataContext="{x:Bind DeckBuilderViewModel.DeckCards}"
              ItemsSource="{Binding CardViewModels}"
              SelectionMode="Single"
              Visibility="Collapsed"
              CanDragItems="True"
              AllowDrop="True"
              DragOver="CardView_DragOver"
              Drop="CardView_Drop"
              DragItemsStarting="CardView_DragItemsStarting"
              DragItemsCompleted="CardView_DragItemsCompleted" 
              ItemTemplate="{StaticResource DeckListViewItemTemplate}"/>
          </Grid>
        </controls:DockPanel>
      </Grid>
    </SplitView>
    <!--Preview image-->
    <Canvas>
      <controls:ImageEx x:Name="PreviewImage" Height="350" IsHitTestVisible="False" CornerRadius="10" Visibility="Collapsed" PlaceholderStretch="Fill" CacheMode="BitmapCache" IsCacheEnabled="True" Style="{StaticResource PreviewImagePlaceholderStyle}"/>
    </Canvas>
  </Grid>
</UserControl>
